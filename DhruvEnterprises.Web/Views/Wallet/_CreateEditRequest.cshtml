@using DhruvEnterprises.Web.Models.Others
@model DhruvEnterprises.Dto.WalletRequestDto
<div id="frm-create-edit-adminrole" class="cmxform">
    <style>
        .hd {
            display: none;
        }
    </style>
    @using (Html.BeginForm("CreateEditRequest", "Wallet", FormMethod.Post, new { @action = Url.Action("CreateEditRequest"), enctype = "multipart/form-data", @id = "frm-create-edit-adminrole" }))
    {
        @Html.HiddenFor(model => model.Id)
        @Html.Partial("_ModalHeader", new ModalHeader { Heading = Model.Id > 0 ? "Update Wallet Request" : "Add Wallet Request" })
        <div id="validation-summary"></div>
        <div class="modal-body form-horizontal">

            <div class="form-group required">
                @Html.LabelFor(m => m.Amount, new { @class = "col-lg-3 col-sm-3 control-label" })
                <div class="col-lg-9 col-sm-9">
                    @Html.TextBoxFor(m => m.Amount, htmlAttributes: new { @class = "form-control ", @placeholder = "Amount", @autocomplete = "off", @maxlength = "8" })
                    <label id="AmountWords" class="amount-words"></label>
                </div>
            </div>
            @{
                if (Model.IsClearCheck == true)
                {
                    <div class="form-group">
                        @Html.LabelFor(m => m.IsClearCredit, new { @class = "col-lg-3 col-sm-3 control-label" })
                        <div class="col-lg-3 col-sm-3">
                        </div>
                        <div class="col-lg-9 col-sm-9">
                            @Html.CheckBoxFor(m => m.IsClearCredit) Yes
                            <span class="badge" style="color:darkblue" title="Request to Clear Your Old Credits">?</span>
                        </div>
                    </div>
                }
            }
            <div class="form-group required">
                @Html.LabelFor(m => m.TrTypeId, new { @class = "col-lg-3 col-sm-3 control-label" })
                <div class="col-lg-9 col-sm-9">
                    @Html.DropDownListFor(m => m.TrTypeId, true, new SelectList(Model.TrTypeList, "Id", "Name", @Model.TrTypeId), "Select Transfer Type", new { @class = "form-control select2" })
                </div>
            </div>

            <div class="form-group required">
                @Html.LabelFor(m => m.BankAccountId, new { @class = "col-lg-3 col-sm-3 control-label" })
                <div class="col-lg-9 col-sm-9">
                    @Html.DropDownListFor(m => m.BankAccountId, true, new SelectList(Model.BankAccountList, "Id", "HolderName", @Model.BankAccountId), "Select Bank Account", new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group required">
                @Html.LabelFor(m => m.Chequeno, new { @class = "col-lg-3 col-sm-3 control-label" })
                <div class="col-lg-9 col-sm-9">
                    @Html.TextBoxFor(m => m.Chequeno, htmlAttributes: new { @class = "form-control ", @placeholder = "Cheque/reference number" })

                </div>
            </div>
            <div class="form-group required">


                @Html.LabelFor(m => m.PaymentDate, new { @class = "col-lg-3 col-sm-3 control-label" })
                <div class="col-lg-9 col-sm-9">
                    @Html.TextBoxFor(m => m.PaymentDate, htmlAttributes: new { @class = "form-control ", @placeholder = "Payment Date", @autocomplete = "off" })

                </div>
            </div>

            <div class="form-group required">
                @Html.LabelFor(m => m.PaymentRemark, new { @class = "col-lg-3 col-sm-3 control-label" })
                <div class="col-lg-9 col-sm-9">
                    @Html.TextBoxFor(m => m.PaymentRemark, htmlAttributes: new { @class = "form-control ", @placeholder = "Payment Remark" })

                </div>
            </div>
            <div class="form-group required">
                <label class="col-lg-3 col-sm-3 control-label">Image</label>
                <div class="col-lg-9 col-sm-9">
                    @Html.TextBoxFor(m => m.FileAttach, "", new { type = "file" })
                </div>
            </div>

        </div>
        @Html.Partial("_ModalFooter", new ModalFooter { })
    }
</div>
<script>

    var jqry = jQuery.noConflict();

    var date = new Date();
    var start = new Date(date.getFullYear(), date.getMonth() - 1, date.getDate());
    var today = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    var end = new Date(date.getFullYear(), date.getMonth(), date.getDate());

    jqry('#PaymentDate').datepicker({
        format: "dd/mm/yyyy",
        todayHighlight: true,
        //  startDate: start,
        endDate: end,
        autoclose: true
    });



    jqry(document).ready(function () {
        jqry('#TrTypeId').select2();

    });

    jqry(document).ready(function () {
        jqry('#BankAccountId').select2();

    });
    jqry(document).on('submit', 'form', function () {
        var buttons = jqry(this).find('[type="submit"]');
        if (jqry(this).valid()) {
            buttons.each(function (btn) {
                jqry(buttons[btn]).prop('disabled', true);
            });
        } else {
            buttons.each(function (btn) {
                jqry(buttons[btn]).prop('disabled', false);
            });
        }
    });

    //jqry('#Amount').blur(function () {
    //    debugger;
    //    var value = jqry(this).val();
    //    if (value == '' || value == null) {
    //        value = "0";
    //        jqry('#AmountWords').text('');
    //    }
    //    else {

    //        jqry.post(Global.DomainName + 'wallet/NumberToWords', { numbers: value }, function (result) {
    //            debugger;
    //            if (!result) {
    //                alertify.error('An internal Error occurred.');
    //            }
    //            else {

    //                jqry('#AmountWords').text(result);
    //            }
    //        });
    //    }
    //});

    function Rs(amount) {
        var words = new Array();
        words[0] = 'Zero'; words[1] = 'One'; words[2] = 'Two'; words[3] = 'Three'; words[4] = 'Four'; words[5] = 'Five'; words[6] = 'Six'; words[7] = 'Seven'; words[8] = 'Eight'; words[9] = 'Nine'; words[10] = 'Ten'; words[11] = 'Eleven'; words[12] = 'Twelve'; words[13] = 'Thirteen'; words[14] = 'Fourteen'; words[15] = 'Fifteen'; words[16] = 'Sixteen'; words[17] = 'Seventeen'; words[18] = 'Eighteen'; words[19] = 'Nineteen'; words[20] = 'Twenty'; words[30] = 'Thirty'; words[40] = 'Forty'; words[50] = 'Fifty'; words[60] = 'Sixty'; words[70] = 'Seventy'; words[80] = 'Eighty'; words[90] = 'Ninety'; var op;
        amount = amount.toString();
        var atemp = amount.split(".");
        var number = atemp[0].split(",").join("");
        var n_length = number.length;
        var words_string = "";
        if (n_length <= 9) {
            var n_array = new Array(0, 0, 0, 0, 0, 0, 0, 0, 0);
            var received_n_array = new Array();
            for (var i = 0; i < n_length; i++) {
                received_n_array[i] = number.substr(i, 1);
            }
            for (var i = 9 - n_length, j = 0; i < 9; i++ , j++) {
                n_array[i] = received_n_array[j];
            }
            for (var i = 0, j = 1; i < 9; i++ , j++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    if (n_array[i] == 1) {
                        n_array[j] = 10 + parseInt(n_array[j]);
                        n_array[i] = 0;
                    }
                }
            }
            var value = "";
            for (var i = 0; i < 9; i++) {
                if (i == 0 || i == 2 || i == 4 || i == 7) {
                    value = n_array[i] * 10;
                } else {
                    value = n_array[i];
                }
                if (value != 0) {
                    words_string += words[value] + " ";
                }
                if ((i == 1 && value != 0) || (i == 0 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Crores ";
                }
                if ((i == 3 && value != 0) || (i == 2 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Lakhs ";
                }
                if ((i == 5 && value != 0) || (i == 4 && value != 0 && n_array[i + 1] == 0)) {
                    words_string += "Thousand ";
                }
                if (i == 6 && value != 0 && (n_array[i + 1] != 0 && n_array[i + 2] != 0)) {
                    words_string += "Hundred and ";
                } else if (i == 6 && value != 0) {
                    words_string += "Hundred ";
                }
            }
            words_string = words_string.split(" ").join(" ");
        }
        return words_string;
    }
    function RsPaise(n) {
        var op = '';
        var nums = n.toString().split('.')
        var amt = n;
        var whole = Rs(nums[0])
        if (nums[1] == null) nums[1] = 0;
        if (nums[1].length == 1) nums[1] = nums[1] + '0';
        if (nums[1].length > 2) { nums[1] = nums[1].substring(2, length - 1) }
        if (nums.length == 2) {
            if (nums[0] <= 9) { nums[0] = nums[0] * 10 } else { nums[0] = nums[0] };
            var fraction = Rs(nums[1])
            if (whole == '' && fraction == '') { op = 'Zero only'; }
            if (whole == '' && fraction != '') { op = 'paise ' + fraction + ' only'; }
            if (whole != '' && fraction == '') { op = 'Rupees ' + whole + ' only'; }
            if (whole != '' && fraction != '') { op = 'Rupees ' + whole + 'and paise ' + fraction + ' only'; }
            if (amt > 999999999.99) { op = 'Error : Amount is too big'; }
            if (isNaN(amt) == true) { op = 'Error : Incorrect amount.'; }

            return op;
        }
    }
    jqry('#Amount').keyup(function () {
        debugger;
        var value = jqry(this).val();
        if (value == '' || value == null) {
            jqry('#AmountWords').text('');
        }
        else {

            var words = RsPaise(Math.round(value * 100) / 100);
            jqry('#AmountWords').text(words);
        }
    });
    jqry("#TrTypeId").change(function () {
        debugger;
        var d = jqry("#TrTypeId").val();
        jqry('#BankAccountId').val('0');
        jqry('#BankAccountId option:eq(0)').attr('selected','selected'); 
        jqry("#BankAccountId").select2();
        if (jqry("#TrTypeId").val() == "2") {
            jqry("#BankAccountId").empty().append('<option selected="selected" value="0" disabled = "disabled">Loading.....</option>');
            jqry.get(Global.DomainName + 'Wallet/BankListData', { typeid: d }, function (result) {
                if (!result) {
                    jqry("#BankAccountId").empty().append('<option selected="selected" value="0">Please select</option>');
                }
                else {
                    jqry("#BankAccountId").empty().append('<option selected="selected" value="0">Please select</option>');
                    jqry.each(result, function () {
                        jqry("#BankAccountId").append(jqry("<option></option>").val(this['Id']).html(this['Username']));
                    });
                }
            });
        }
        else {
            jqry("#BankAccountId").empty().append('<option selected="selected" value="0" disabled = "disabled">Loading.....</option>');
            jqry.get(Global.DomainName + 'Wallet/BankListData', { typeid: d }, function (result) {
                if (!result) {
                    jqry("#BankAccountId").empty().append('<option selected="selected" value="0">Please select</option>');
                }
                else {
                    jqry("#BankAccountId").empty().append('<option selected="selected" value="0">Please select</option>');
                    jqry.each(result, function () {
                        jqry("#BankAccountId").append(jqry("<option></option>").val(this['Id']).html(this['Username']));
                    });
                }
            });
        }

    });

</script>