//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DhruvEnterprises.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DhruvEnterprisesDBEntities : DbContext
    {
        public DhruvEnterprisesDBEntities()
            : base("name=DhruvEnterprisesDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountType> AccountTypes { get; set; }
        public virtual DbSet<ActivityLog> ActivityLogs { get; set; }
        public virtual DbSet<AmountRouting> AmountRoutings { get; set; }
        public virtual DbSet<AmountUnit> AmountUnits { get; set; }
        public virtual DbSet<AmtType> AmtTypes { get; set; }
        public virtual DbSet<ApiRandomKey> ApiRandomKeys { get; set; }
        public virtual DbSet<ApiSource> ApiSources { get; set; }
        public virtual DbSet<ApiSourceExt> ApiSourceExts { get; set; }
        public virtual DbSet<ApiType> ApiTypes { get; set; }
        public virtual DbSet<ApiUrl> ApiUrls { get; set; }
        public virtual DbSet<ApiUrlType> ApiUrlTypes { get; set; }
        public virtual DbSet<ApiWalletTxn> ApiWalletTxns { get; set; }
        public virtual DbSet<BankAccount> BankAccounts { get; set; }
        public virtual DbSet<BankAccountData> BankAccountDatas { get; set; }
        public virtual DbSet<BankStatement> BankStatements { get; set; }
        public virtual DbSet<BeneficiaryList> BeneficiaryLists { get; set; }
        public virtual DbSet<BlockRoute> BlockRoutes { get; set; }
        public virtual DbSet<Cart> Carts { get; set; }
        public virtual DbSet<Circle> Circles { get; set; }
        public virtual DbSet<CircleCode> CircleCodes { get; set; }
        public virtual DbSet<CircleRouting> CircleRoutings { get; set; }
        public virtual DbSet<CommanRouting> CommanRoutings { get; set; }
        public virtual DbSet<CommonSwitch> CommonSwitches { get; set; }
        public virtual DbSet<CommType> CommTypes { get; set; }
        public virtual DbSet<Complaint> Complaints { get; set; }
        public virtual DbSet<DMT> DMTs { get; set; }
        public virtual DbSet<DueAmount> DueAmounts { get; set; }
        public virtual DbSet<EmailAPI> EmailAPIs { get; set; }
        public virtual DbSet<ExcelPayoutListverify> ExcelPayoutListverifies { get; set; }
        public virtual DbSet<FilterType> FilterTypes { get; set; }
        public virtual DbSet<FireBaseToken> FireBaseTokens { get; set; }
        public virtual DbSet<GatewayTransferType> GatewayTransferTypes { get; set; }
        public virtual DbSet<GlobalSetting> GlobalSettings { get; set; }
        public virtual DbSet<InvoiceDetail> InvoiceDetails { get; set; }
        public virtual DbSet<KYCDistrictList> KYCDistrictLists { get; set; }
        public virtual DbSet<KYCStateList> KYCStateLists { get; set; }
        public virtual DbSet<KYCTypedDocument> KYCTypedDocuments { get; set; }
        public virtual DbSet<MapMenuToRole> MapMenuToRoles { get; set; }
        public virtual DbSet<MediumType> MediumTypes { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<NotificationBar> NotificationBars { get; set; }
        public virtual DbSet<Operator> Operators { get; set; }
        public virtual DbSet<OperatorCode> OperatorCodes { get; set; }
        public virtual DbSet<OperatorKeyGenrate> OperatorKeyGenrates { get; set; }
        public virtual DbSet<OperatorSerial> OperatorSerials { get; set; }
        public virtual DbSet<OperatorType> OperatorTypes { get; set; }
        public virtual DbSet<OperatorValidation> OperatorValidations { get; set; }
        public virtual DbSet<OperatorValidType> OperatorValidTypes { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PackageComm> PackageComms { get; set; }
        public virtual DbSet<PackageCommCircle> PackageCommCircles { get; set; }
        public virtual DbSet<PackageCommRange> PackageCommRanges { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductImage> ProductImages { get; set; }
        public virtual DbSet<RCType> RCTypes { get; set; }
        public virtual DbSet<Recharge> Recharges { get; set; }
        public virtual DbSet<RechargeGap> RechargeGaps { get; set; }
        public virtual DbSet<RechargeGiftCard> RechargeGiftCards { get; set; }
        public virtual DbSet<RequestResponse> RequestResponses { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SmsAPI> SmsAPIs { get; set; }
        public virtual DbSet<SMSData> SMSDatas { get; set; }
        public virtual DbSet<SqlErrorLog> SqlErrorLogs { get; set; }
        public virtual DbSet<StateList> StateLists { get; set; }
        public virtual DbSet<StatusType> StatusTypes { get; set; }
        public virtual DbSet<StopRouteMessage> StopRouteMessages { get; set; }
        public virtual DbSet<SwitchType> SwitchTypes { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TagValue> TagValues { get; set; }
        public virtual DbSet<TracingLog> TracingLogs { get; set; }
        public virtual DbSet<TransferType> TransferTypes { get; set; }
        public virtual DbSet<TxnLedger> TxnLedgers { get; set; }
        public virtual DbSet<TxnType> TxnTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserFilterRule> UserFilterRules { get; set; }
        public virtual DbSet<UserFilterRuleReport> UserFilterRuleReports { get; set; }
        public virtual DbSet<UserKYC> UserKYCs { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<WalletRequest> WalletRequests { get; set; }
        public virtual DbSet<bankit> bankits { get; set; }
        public virtual DbSet<UserHistory> UserHistories { get; set; }
        public virtual DbSet<View_UserListWithBalance> View_UserListWithBalance { get; set; }
    
        [DbFunction("DhruvEnterprisesDBEntities", "DelimitedSplit8K")]
        public virtual IQueryable<DelimitedSplit8K_Result> DelimitedSplit8K(string pString, string pDelimiter)
        {
            var pStringParameter = pString != null ?
                new ObjectParameter("pString", pString) :
                new ObjectParameter("pString", typeof(string));
    
            var pDelimiterParameter = pDelimiter != null ?
                new ObjectParameter("pDelimiter", pDelimiter) :
                new ObjectParameter("pDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DelimitedSplit8K_Result>("[DhruvEnterprisesDBEntities].[DelimitedSplit8K](@pString, @pDelimiter)", pStringParameter, pDelimiterParameter);
        }
    
        public virtual int AddUpdateCart(Nullable<int> id, Nullable<int> userid, Nullable<int> productid, Nullable<int> quantity, ObjectParameter error, string img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("Productid", productid) :
                new ObjectParameter("Productid", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("img", img) :
                new ObjectParameter("img", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateCart", idParameter, useridParameter, productidParameter, quantityParameter, error, imgParameter);
        }
    
        public virtual int Api_DMTCreate(Nullable<int> apiId, Nullable<int> userId, string iPAddress, string accountNo, Nullable<decimal> amount, Nullable<int> opId, Nullable<int> bCID, Nullable<decimal> commAmount, Nullable<int> amtTypeId, Nullable<int> dID, string ourRef, Nullable<decimal> debitAmount, Nullable<int> switchTypeId, Nullable<long> switchedRecId, string userTxnId, Nullable<int> mediumId, string beneName, string iFSC, string transferMode, string beneMobileNo, ObjectParameter apiUrl, ObjectParameter method, ObjectParameter contentType, ObjectParameter resType, ObjectParameter postData, ObjectParameter urlId, ObjectParameter apiUserId, ObjectParameter apiPassword, ObjectParameter apiOptional, ObjectParameter opCode, ObjectParameter extraUrl, ObjectParameter extraUrlData, ObjectParameter recId, ObjectParameter txnId, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log, ObjectParameter apiTypeId)
        {
            var apiIdParameter = apiId.HasValue ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var bCIDParameter = bCID.HasValue ?
                new ObjectParameter("BCID", bCID) :
                new ObjectParameter("BCID", typeof(int));
    
            var commAmountParameter = commAmount.HasValue ?
                new ObjectParameter("CommAmount", commAmount) :
                new ObjectParameter("CommAmount", typeof(decimal));
    
            var amtTypeIdParameter = amtTypeId.HasValue ?
                new ObjectParameter("AmtTypeId", amtTypeId) :
                new ObjectParameter("AmtTypeId", typeof(int));
    
            var dIDParameter = dID.HasValue ?
                new ObjectParameter("DID", dID) :
                new ObjectParameter("DID", typeof(int));
    
            var ourRefParameter = ourRef != null ?
                new ObjectParameter("OurRef", ourRef) :
                new ObjectParameter("OurRef", typeof(string));
    
            var debitAmountParameter = debitAmount.HasValue ?
                new ObjectParameter("DebitAmount", debitAmount) :
                new ObjectParameter("DebitAmount", typeof(decimal));
    
            var switchTypeIdParameter = switchTypeId.HasValue ?
                new ObjectParameter("SwitchTypeId", switchTypeId) :
                new ObjectParameter("SwitchTypeId", typeof(int));
    
            var switchedRecIdParameter = switchedRecId.HasValue ?
                new ObjectParameter("SwitchedRecId", switchedRecId) :
                new ObjectParameter("SwitchedRecId", typeof(long));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var mediumIdParameter = mediumId.HasValue ?
                new ObjectParameter("MediumId", mediumId) :
                new ObjectParameter("MediumId", typeof(int));
    
            var beneNameParameter = beneName != null ?
                new ObjectParameter("BeneName", beneName) :
                new ObjectParameter("BeneName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var transferModeParameter = transferMode != null ?
                new ObjectParameter("transferMode", transferMode) :
                new ObjectParameter("transferMode", typeof(string));
    
            var beneMobileNoParameter = beneMobileNo != null ?
                new ObjectParameter("BeneMobileNo", beneMobileNo) :
                new ObjectParameter("BeneMobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Api_DMTCreate", apiIdParameter, userIdParameter, iPAddressParameter, accountNoParameter, amountParameter, opIdParameter, bCIDParameter, commAmountParameter, amtTypeIdParameter, dIDParameter, ourRefParameter, debitAmountParameter, switchTypeIdParameter, switchedRecIdParameter, userTxnIdParameter, mediumIdParameter, beneNameParameter, iFSCParameter, transferModeParameter, beneMobileNoParameter, apiUrl, method, contentType, resType, postData, urlId, apiUserId, apiPassword, apiOptional, opCode, extraUrl, extraUrlData, recId, txnId, errorCode, errorDesc, log, apiTypeId);
        }
    
        public virtual int CheckToken_RegmobileNo(string regMobileNo, string tokenId, ObjectParameter tokenvalid, ObjectParameter error)
        {
            var regMobileNoParameter = regMobileNo != null ?
                new ObjectParameter("RegMobileNo", regMobileNo) :
                new ObjectParameter("RegMobileNo", typeof(string));
    
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckToken_RegmobileNo", regMobileNoParameter, tokenIdParameter, tokenvalid, error);
        }
    
        public virtual ObjectResult<HomePage1_Result> HomePage1(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> userId, Nullable<int> roleid)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HomePage1_Result>("HomePage1", sDateParameter, eDateParameter, userIdParameter, roleidParameter);
        }
    
        public virtual int Package_Update(Nullable<int> packageType, Nullable<int> circleId, Nullable<int> opid, string packid, Nullable<decimal> minAmt, Nullable<decimal> maxAmt, Nullable<decimal> commAmt, Nullable<int> updatebyId)
        {
            var packageTypeParameter = packageType.HasValue ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(int));
    
            var circleIdParameter = circleId.HasValue ?
                new ObjectParameter("CircleId", circleId) :
                new ObjectParameter("CircleId", typeof(int));
    
            var opidParameter = opid.HasValue ?
                new ObjectParameter("Opid", opid) :
                new ObjectParameter("Opid", typeof(int));
    
            var packidParameter = packid != null ?
                new ObjectParameter("Packid", packid) :
                new ObjectParameter("Packid", typeof(string));
    
            var minAmtParameter = minAmt.HasValue ?
                new ObjectParameter("MinAmt", minAmt) :
                new ObjectParameter("MinAmt", typeof(decimal));
    
            var maxAmtParameter = maxAmt.HasValue ?
                new ObjectParameter("MaxAmt", maxAmt) :
                new ObjectParameter("MaxAmt", typeof(decimal));
    
            var commAmtParameter = commAmt.HasValue ?
                new ObjectParameter("CommAmt", commAmt) :
                new ObjectParameter("CommAmt", typeof(decimal));
    
            var updatebyIdParameter = updatebyId.HasValue ?
                new ObjectParameter("UpdatebyId", updatebyId) :
                new ObjectParameter("UpdatebyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Package_Update", packageTypeParameter, circleIdParameter, opidParameter, packidParameter, minAmtParameter, maxAmtParameter, commAmtParameter, updatebyIdParameter);
        }
    
        public virtual ObjectResult<proc_RequestResponse_Result> proc_RequestResponse(Nullable<long> recID)
        {
            var recIDParameter = recID.HasValue ?
                new ObjectParameter("recID", recID) :
                new ObjectParameter("recID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_RequestResponse_Result>("proc_RequestResponse", recIDParameter);
        }
    
        public virtual ObjectResult<ShowCart_Result> ShowCart(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("Userid", userid) :
                new ObjectParameter("Userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowCart_Result>("ShowCart", useridParameter);
        }
    
        public virtual ObjectResult<smsapiactive_Result> smsapiactive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<smsapiactive_Result>("smsapiactive");
        }
    
        public virtual int Smsinsert(Nullable<int> smsid, string mobileno, string message, string response)
        {
            var smsidParameter = smsid.HasValue ?
                new ObjectParameter("smsid", smsid) :
                new ObjectParameter("smsid", typeof(int));
    
            var mobilenoParameter = mobileno != null ?
                new ObjectParameter("Mobileno", mobileno) :
                new ObjectParameter("Mobileno", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Smsinsert", smsidParameter, mobilenoParameter, messageParameter, responseParameter);
        }
    
        public virtual int sp_ActivateSmsApi(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ActivateSmsApi", idParameter);
        }
    
        public virtual int sp_AddApiWallet(string apiId, Nullable<decimal> ins_Amt, Nullable<decimal> amountSent, Nullable<decimal> amountReceived, string remark, Nullable<int> addedById, Nullable<int> bankAccountId, Nullable<int> trTypeId, string chequeNo, string isPullOut, ObjectParameter error)
        {
            var apiIdParameter = apiId != null ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(string));
    
            var ins_AmtParameter = ins_Amt.HasValue ?
                new ObjectParameter("Ins_Amt", ins_Amt) :
                new ObjectParameter("Ins_Amt", typeof(decimal));
    
            var amountSentParameter = amountSent.HasValue ?
                new ObjectParameter("AmountSent", amountSent) :
                new ObjectParameter("AmountSent", typeof(decimal));
    
            var amountReceivedParameter = amountReceived.HasValue ?
                new ObjectParameter("AmountReceived", amountReceived) :
                new ObjectParameter("AmountReceived", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var addedByIdParameter = addedById.HasValue ?
                new ObjectParameter("AddedById", addedById) :
                new ObjectParameter("AddedById", typeof(int));
    
            var bankAccountIdParameter = bankAccountId.HasValue ?
                new ObjectParameter("BankAccountId", bankAccountId) :
                new ObjectParameter("BankAccountId", typeof(int));
    
            var trTypeIdParameter = trTypeId.HasValue ?
                new ObjectParameter("TrTypeId", trTypeId) :
                new ObjectParameter("TrTypeId", typeof(int));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var isPullOutParameter = isPullOut != null ?
                new ObjectParameter("IsPullOut", isPullOut) :
                new ObjectParameter("IsPullOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddApiWallet", apiIdParameter, ins_AmtParameter, amountSentParameter, amountReceivedParameter, remarkParameter, addedByIdParameter, bankAccountIdParameter, trTypeIdParameter, chequeNoParameter, isPullOutParameter, error);
        }
    
        public virtual int SP_AddBeneficiaryList(string tokenId, string recipientId, string bankAccountNumber, string bankName, string mobileNumber, string ifsc, string recipientName, string recipientStatus)
        {
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var recipientIdParameter = recipientId != null ?
                new ObjectParameter("RecipientId", recipientId) :
                new ObjectParameter("RecipientId", typeof(string));
    
            var bankAccountNumberParameter = bankAccountNumber != null ?
                new ObjectParameter("BankAccountNumber", bankAccountNumber) :
                new ObjectParameter("BankAccountNumber", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var ifscParameter = ifsc != null ?
                new ObjectParameter("Ifsc", ifsc) :
                new ObjectParameter("Ifsc", typeof(string));
    
            var recipientNameParameter = recipientName != null ?
                new ObjectParameter("RecipientName", recipientName) :
                new ObjectParameter("RecipientName", typeof(string));
    
            var recipientStatusParameter = recipientStatus != null ?
                new ObjectParameter("RecipientStatus", recipientStatus) :
                new ObjectParameter("RecipientStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddBeneficiaryList", tokenIdParameter, recipientIdParameter, bankAccountNumberParameter, bankNameParameter, mobileNumberParameter, ifscParameter, recipientNameParameter, recipientStatusParameter);
        }
    
        public virtual int sp_AddProductStock(Nullable<int> productId, Nullable<int> productAttributeId, Nullable<int> userId, string isPullOut, string remark, Nullable<decimal> purchasePrice, Nullable<decimal> sellPrice, Nullable<int> addedById, Nullable<int> quantity, ObjectParameter error)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var productAttributeIdParameter = productAttributeId.HasValue ?
                new ObjectParameter("ProductAttributeId", productAttributeId) :
                new ObjectParameter("ProductAttributeId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isPullOutParameter = isPullOut != null ?
                new ObjectParameter("IsPullOut", isPullOut) :
                new ObjectParameter("IsPullOut", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var purchasePriceParameter = purchasePrice.HasValue ?
                new ObjectParameter("PurchasePrice", purchasePrice) :
                new ObjectParameter("PurchasePrice", typeof(decimal));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("SellPrice", sellPrice) :
                new ObjectParameter("SellPrice", typeof(decimal));
    
            var addedByIdParameter = addedById.HasValue ?
                new ObjectParameter("AddedById", addedById) :
                new ObjectParameter("AddedById", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddProductStock", productIdParameter, productAttributeIdParameter, userIdParameter, isPullOutParameter, remarkParameter, purchasePriceParameter, sellPriceParameter, addedByIdParameter, quantityParameter, error);
        }
    
        public virtual int sp_AddPullAccount(string isWithdraw, Nullable<int> accountId, Nullable<decimal> amount, Nullable<int> trTypeId, Nullable<int> refAccountId, string paymentRef, string remark, Nullable<int> addedById, Nullable<int> userId, Nullable<int> apiId, Nullable<System.DateTime> paymentDate, ObjectParameter error, ObjectParameter errorDesc, ObjectParameter log)
        {
            var isWithdrawParameter = isWithdraw != null ?
                new ObjectParameter("IsWithdraw", isWithdraw) :
                new ObjectParameter("IsWithdraw", typeof(string));
    
            var accountIdParameter = accountId.HasValue ?
                new ObjectParameter("AccountId", accountId) :
                new ObjectParameter("AccountId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var trTypeIdParameter = trTypeId.HasValue ?
                new ObjectParameter("TrTypeId", trTypeId) :
                new ObjectParameter("TrTypeId", typeof(int));
    
            var refAccountIdParameter = refAccountId.HasValue ?
                new ObjectParameter("RefAccountId", refAccountId) :
                new ObjectParameter("RefAccountId", typeof(int));
    
            var paymentRefParameter = paymentRef != null ?
                new ObjectParameter("PaymentRef", paymentRef) :
                new ObjectParameter("PaymentRef", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var addedByIdParameter = addedById.HasValue ?
                new ObjectParameter("AddedById", addedById) :
                new ObjectParameter("AddedById", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var apiIdParameter = apiId.HasValue ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(int));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddPullAccount", isWithdrawParameter, accountIdParameter, amountParameter, trTypeIdParameter, refAccountIdParameter, paymentRefParameter, remarkParameter, addedByIdParameter, userIdParameter, apiIdParameter, paymentDateParameter, error, errorDesc, log);
        }
    
        public virtual int sp_AddUserApiWalletExchange(string apiId, Nullable<decimal> ins_Amt, Nullable<decimal> amountSent, Nullable<decimal> amountReceived, string remark, Nullable<int> addedById, Nullable<int> bankAccountId, Nullable<int> trTypeId, string chequeNo, string isPullOut, ObjectParameter error)
        {
            var apiIdParameter = apiId != null ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(string));
    
            var ins_AmtParameter = ins_Amt.HasValue ?
                new ObjectParameter("Ins_Amt", ins_Amt) :
                new ObjectParameter("Ins_Amt", typeof(decimal));
    
            var amountSentParameter = amountSent.HasValue ?
                new ObjectParameter("AmountSent", amountSent) :
                new ObjectParameter("AmountSent", typeof(decimal));
    
            var amountReceivedParameter = amountReceived.HasValue ?
                new ObjectParameter("AmountReceived", amountReceived) :
                new ObjectParameter("AmountReceived", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var addedByIdParameter = addedById.HasValue ?
                new ObjectParameter("AddedById", addedById) :
                new ObjectParameter("AddedById", typeof(int));
    
            var bankAccountIdParameter = bankAccountId.HasValue ?
                new ObjectParameter("BankAccountId", bankAccountId) :
                new ObjectParameter("BankAccountId", typeof(int));
    
            var trTypeIdParameter = trTypeId.HasValue ?
                new ObjectParameter("TrTypeId", trTypeId) :
                new ObjectParameter("TrTypeId", typeof(int));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var isPullOutParameter = isPullOut != null ?
                new ObjectParameter("IsPullOut", isPullOut) :
                new ObjectParameter("IsPullOut", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUserApiWalletExchange", apiIdParameter, ins_AmtParameter, amountSentParameter, amountReceivedParameter, remarkParameter, addedByIdParameter, bankAccountIdParameter, trTypeIdParameter, chequeNoParameter, isPullOutParameter, error);
        }
    
        public virtual int sp_AddUserWallet(string isPullOut, Nullable<int> userId, Nullable<decimal> amount, string remark, Nullable<int> addedById, string wRID, string isCreditClear, Nullable<int> trTypeId, Nullable<int> bankAccountId, string chequeNo, Nullable<System.DateTime> paymentDate, ObjectParameter error, ObjectParameter log)
        {
            var isPullOutParameter = isPullOut != null ?
                new ObjectParameter("IsPullOut", isPullOut) :
                new ObjectParameter("IsPullOut", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var addedByIdParameter = addedById.HasValue ?
                new ObjectParameter("AddedById", addedById) :
                new ObjectParameter("AddedById", typeof(int));
    
            var wRIDParameter = wRID != null ?
                new ObjectParameter("WRID", wRID) :
                new ObjectParameter("WRID", typeof(string));
    
            var isCreditClearParameter = isCreditClear != null ?
                new ObjectParameter("IsCreditClear", isCreditClear) :
                new ObjectParameter("IsCreditClear", typeof(string));
    
            var trTypeIdParameter = trTypeId.HasValue ?
                new ObjectParameter("TrTypeId", trTypeId) :
                new ObjectParameter("TrTypeId", typeof(int));
    
            var bankAccountIdParameter = bankAccountId.HasValue ?
                new ObjectParameter("BankAccountId", bankAccountId) :
                new ObjectParameter("BankAccountId", typeof(int));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var paymentDateParameter = paymentDate.HasValue ?
                new ObjectParameter("PaymentDate", paymentDate) :
                new ObjectParameter("PaymentDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddUserWallet", isPullOutParameter, userIdParameter, amountParameter, remarkParameter, addedByIdParameter, wRIDParameter, isCreditClearParameter, trTypeIdParameter, bankAccountIdParameter, chequeNoParameter, paymentDateParameter, error, log);
        }
    
        public virtual int sp_Auto_AddLapuWallet_FromHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Auto_AddLapuWallet_FromHistory");
        }
    
        public virtual int sp_AutoCorrect_ApiWalletTxn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AutoCorrect_ApiWalletTxn");
        }
    
        public virtual int sp_AutoCorrect_UserTxn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AutoCorrect_UserTxn");
        }
    
        public virtual int sp_AutoCorrectTxn_reCalculate_Sequence()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AutoCorrectTxn_reCalculate_Sequence");
        }
    
        public virtual ObjectResult<Sp_CheckExceldata_Result> Sp_CheckExceldata(Nullable<int> bankAccountId, string chequeNo, Nullable<System.DateTime> transactionDate)
        {
            var bankAccountIdParameter = bankAccountId.HasValue ?
                new ObjectParameter("BankAccountId", bankAccountId) :
                new ObjectParameter("BankAccountId", typeof(int));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_CheckExceldata_Result>("Sp_CheckExceldata", bankAccountIdParameter, chequeNoParameter, transactionDateParameter);
        }
    
        public virtual int SP_DMTRequestValidation(Nullable<System.Guid> apiToken, string accountNO, Nullable<decimal> amount, string userTxnId, Nullable<int> opId, string iPAddress, string userPin, string iFSC, ObjectParameter bankcode, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log, ObjectParameter debitAmount, ObjectParameter userComm, ObjectParameter switchTypeId, ObjectParameter userId, ObjectParameter amtTypeId, ObjectParameter api1, ObjectParameter api2, ObjectParameter api3)
        {
            var apiTokenParameter = apiToken.HasValue ?
                new ObjectParameter("ApiToken", apiToken) :
                new ObjectParameter("ApiToken", typeof(System.Guid));
    
            var accountNOParameter = accountNO != null ?
                new ObjectParameter("AccountNO", accountNO) :
                new ObjectParameter("AccountNO", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var userPinParameter = userPin != null ?
                new ObjectParameter("UserPin", userPin) :
                new ObjectParameter("UserPin", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DMTRequestValidation", apiTokenParameter, accountNOParameter, amountParameter, userTxnIdParameter, opIdParameter, iPAddressParameter, userPinParameter, iFSCParameter, bankcode, errorCode, errorDesc, log, debitAmount, userComm, switchTypeId, userId, amtTypeId, api1, api2, api3);
        }
    
        public virtual int SP_GetApiUrl(string tokenId, Nullable<int> opId, Nullable<int> urlType, ObjectParameter error, ObjectParameter apiUrl, ObjectParameter postData, ObjectParameter opCode)
        {
            var tokenIdParameter = tokenId != null ?
                new ObjectParameter("TokenId", tokenId) :
                new ObjectParameter("TokenId", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var urlTypeParameter = urlType.HasValue ?
                new ObjectParameter("urlType", urlType) :
                new ObjectParameter("urlType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetApiUrl", tokenIdParameter, opIdParameter, urlTypeParameter, error, apiUrl, postData, opCode);
        }
    
        public virtual int sp_GetCounts(Nullable<int> userId, ObjectParameter complaintCount, ObjectParameter processingCount, ObjectParameter wRCount, ObjectParameter failedMsg, ObjectParameter procMsg, ObjectParameter holdMsg)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetCounts", userIdParameter, complaintCount, processingCount, wRCount, failedMsg, procMsg, holdMsg);
        }
    
        public virtual ObjectResult<Sp_GetPayoutPayVerify_Result> Sp_GetPayoutPayVerify(string uniqueIdkey)
        {
            var uniqueIdkeyParameter = uniqueIdkey != null ?
                new ObjectParameter("UniqueIdkey", uniqueIdkey) :
                new ObjectParameter("UniqueIdkey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetPayoutPayVerify_Result>("Sp_GetPayoutPayVerify", uniqueIdkeyParameter);
        }
    
        public virtual int Sp_InserdataExcelbillPayVerify(Nullable<int> userId, string customerNo, string accountNo, string iFSC, string name, Nullable<decimal> amount, string type, string rtStatus, string uniqueIdkey, string firstname, string lastname)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var rtStatusParameter = rtStatus != null ?
                new ObjectParameter("RtStatus", rtStatus) :
                new ObjectParameter("RtStatus", typeof(string));
    
            var uniqueIdkeyParameter = uniqueIdkey != null ?
                new ObjectParameter("UniqueIdkey", uniqueIdkey) :
                new ObjectParameter("UniqueIdkey", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("Firstname", firstname) :
                new ObjectParameter("Firstname", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InserdataExcelbillPayVerify", userIdParameter, customerNoParameter, accountNoParameter, iFSCParameter, nameParameter, amountParameter, typeParameter, rtStatusParameter, uniqueIdkeyParameter, firstnameParameter, lastnameParameter);
        }
    
        public virtual int Sp_MyOrder(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> uid, Nullable<long> txnid, Nullable<int> pageNumber, Nullable<int> pageSize, ObjectParameter totalCount)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var uidParameter = uid.HasValue ?
                new ObjectParameter("Uid", uid) :
                new ObjectParameter("Uid", typeof(int));
    
            var txnidParameter = txnid.HasValue ?
                new ObjectParameter("Txnid", txnid) :
                new ObjectParameter("Txnid", typeof(long));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_MyOrder", sDateParameter, eDateParameter, uidParameter, txnidParameter, pageNumberParameter, pageSizeParameter, totalCount);
        }
    
        public virtual ObjectResult<Sp_MyOrderDetails_Result> Sp_MyOrderDetails(Nullable<int> orderid)
        {
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("Orderid", orderid) :
                new ObjectParameter("Orderid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_MyOrderDetails_Result>("Sp_MyOrderDetails", orderidParameter);
        }
    
        public virtual int Sp_PayinStatuscheckTxnCreate(Nullable<int> userId, Nullable<decimal> amount, Nullable<int> statusId, string statusMessage, string ourOderId, string upiTxnId, string userTxnId, string customerNo, string ourTxnId, Nullable<long> recId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("StatusMessage", statusMessage) :
                new ObjectParameter("StatusMessage", typeof(string));
    
            var ourOderIdParameter = ourOderId != null ?
                new ObjectParameter("OurOderId", ourOderId) :
                new ObjectParameter("OurOderId", typeof(string));
    
            var upiTxnIdParameter = upiTxnId != null ?
                new ObjectParameter("UpiTxnId", upiTxnId) :
                new ObjectParameter("UpiTxnId", typeof(string));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var ourTxnIdParameter = ourTxnId != null ?
                new ObjectParameter("OurTxnId", ourTxnId) :
                new ObjectParameter("OurTxnId", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PayinStatuscheckTxnCreate", userIdParameter, amountParameter, statusIdParameter, statusMessageParameter, ourOderIdParameter, upiTxnIdParameter, userTxnIdParameter, customerNoParameter, ourTxnIdParameter, recIdParameter);
        }
    
        public virtual int Sp_PayinTxnCreate(Nullable<int> userId, string ipAddress, Nullable<decimal> amount, Nullable<int> statusId, string statusMessage, string ourOderId, string upiTxnId, string integration_Id, string userTxnId, Nullable<int> opId, string customerNo, string ourTxnId, Nullable<long> recId, string ledgerTxnid, ObjectParameter rid, string qr_intent, string payment_url)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var statusMessageParameter = statusMessage != null ?
                new ObjectParameter("StatusMessage", statusMessage) :
                new ObjectParameter("StatusMessage", typeof(string));
    
            var ourOderIdParameter = ourOderId != null ?
                new ObjectParameter("OurOderId", ourOderId) :
                new ObjectParameter("OurOderId", typeof(string));
    
            var upiTxnIdParameter = upiTxnId != null ?
                new ObjectParameter("UpiTxnId", upiTxnId) :
                new ObjectParameter("UpiTxnId", typeof(string));
    
            var integration_IdParameter = integration_Id != null ?
                new ObjectParameter("Integration_Id", integration_Id) :
                new ObjectParameter("Integration_Id", typeof(string));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var ourTxnIdParameter = ourTxnId != null ?
                new ObjectParameter("OurTxnId", ourTxnId) :
                new ObjectParameter("OurTxnId", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var ledgerTxnidParameter = ledgerTxnid != null ?
                new ObjectParameter("ledgerTxnid", ledgerTxnid) :
                new ObjectParameter("ledgerTxnid", typeof(string));
    
            var qr_intentParameter = qr_intent != null ?
                new ObjectParameter("qr_intent", qr_intent) :
                new ObjectParameter("qr_intent", typeof(string));
    
            var payment_urlParameter = payment_url != null ?
                new ObjectParameter("payment_url", payment_url) :
                new ObjectParameter("payment_url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PayinTxnCreate", userIdParameter, ipAddressParameter, amountParameter, statusIdParameter, statusMessageParameter, ourOderIdParameter, upiTxnIdParameter, integration_IdParameter, userTxnIdParameter, opIdParameter, customerNoParameter, ourTxnIdParameter, recIdParameter, ledgerTxnidParameter, rid, qr_intentParameter, payment_urlParameter);
        }
    
        public virtual int SP_SenderRegistrationValidation(string apiToken, string userName, string iPAddress, ObjectParameter errorCode, ObjectParameter userId, ObjectParameter errorDesc, ObjectParameter log)
        {
            var apiTokenParameter = apiToken != null ?
                new ObjectParameter("ApiToken", apiToken) :
                new ObjectParameter("ApiToken", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SenderRegistrationValidation", apiTokenParameter, userNameParameter, iPAddressParameter, errorCode, userId, errorDesc, log);
        }
    
        public virtual int Sp_UpdateTxnLadger(Nullable<int> userId, Nullable<int> orderid, Nullable<decimal> amount, Nullable<int> addedById, string remark, Nullable<int> walletType, ObjectParameter error)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var orderidParameter = orderid.HasValue ?
                new ObjectParameter("Orderid", orderid) :
                new ObjectParameter("Orderid", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var addedByIdParameter = addedById.HasValue ?
                new ObjectParameter("AddedById", addedById) :
                new ObjectParameter("AddedById", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateTxnLadger", userIdParameter, orderidParameter, amountParameter, addedByIdParameter, remarkParameter, walletTypeParameter, error);
        }
    
        public virtual int SP_UpiRequestValidation(Nullable<System.Guid> apiToken, string userName, string customerNo, Nullable<decimal> amount, string userTxnId, string iPAddress, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log, ObjectParameter userId)
        {
            var apiTokenParameter = apiToken.HasValue ?
                new ObjectParameter("ApiToken", apiToken) :
                new ObjectParameter("ApiToken", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpiRequestValidation", apiTokenParameter, userNameParameter, customerNoParameter, amountParameter, userTxnIdParameter, iPAddressParameter, errorCode, errorDesc, log, userId);
        }
    
        public virtual int SP_UpiStatusCheck(string clintid, ObjectParameter ourRefTxnId, ObjectParameter recid, ObjectParameter errorCode, ObjectParameter errorDesc)
        {
            var clintidParameter = clintid != null ?
                new ObjectParameter("Clintid", clintid) :
                new ObjectParameter("Clintid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpiStatusCheck", clintidParameter, ourRefTxnId, recid, errorCode, errorDesc);
        }
    
        public virtual ObjectResult<Sp_ValidUser_Result> Sp_ValidUser(string tokenApi, ObjectParameter result)
        {
            var tokenApiParameter = tokenApi != null ?
                new ObjectParameter("TokenApi", tokenApi) :
                new ObjectParameter("TokenApi", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ValidUser_Result>("Sp_ValidUser", tokenApiParameter, result);
        }
    
        public virtual int TEST(string updateType, Nullable<long> recId, Nullable<int> statusId, string apiTxnId, string beneName, string optTxnId, string statusMsg, string remark, Nullable<int> userId, ObjectParameter isRefund, ObjectParameter isDownline, ObjectParameter log, Nullable<long> lapuId, string lapuNo, string fessionNo, Nullable<int> opId)
        {
            var updateTypeParameter = updateType != null ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var apiTxnIdParameter = apiTxnId != null ?
                new ObjectParameter("ApiTxnId", apiTxnId) :
                new ObjectParameter("ApiTxnId", typeof(string));
    
            var beneNameParameter = beneName != null ?
                new ObjectParameter("BeneName", beneName) :
                new ObjectParameter("BeneName", typeof(string));
    
            var optTxnIdParameter = optTxnId != null ?
                new ObjectParameter("OptTxnId", optTxnId) :
                new ObjectParameter("OptTxnId", typeof(string));
    
            var statusMsgParameter = statusMsg != null ?
                new ObjectParameter("StatusMsg", statusMsg) :
                new ObjectParameter("StatusMsg", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lapuIdParameter = lapuId.HasValue ?
                new ObjectParameter("LapuId", lapuId) :
                new ObjectParameter("LapuId", typeof(long));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            var fessionNoParameter = fessionNo != null ?
                new ObjectParameter("FessionNo", fessionNo) :
                new ObjectParameter("FessionNo", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TEST", updateTypeParameter, recIdParameter, statusIdParameter, apiTxnIdParameter, beneNameParameter, optTxnIdParameter, statusMsgParameter, remarkParameter, userIdParameter, isRefund, isDownline, log, lapuIdParameter, lapuNoParameter, fessionNoParameter, opIdParameter);
        }
    
        public virtual ObjectResult<use_GetOperatorDaybook_Result> use_GetOperatorDaybook(Nullable<System.DateTime> sdate, Nullable<System.DateTime> edate, Nullable<int> userid, Nullable<int> apiid)
        {
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var edateParameter = edate.HasValue ?
                new ObjectParameter("edate", edate) :
                new ObjectParameter("edate", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var apiidParameter = apiid.HasValue ?
                new ObjectParameter("apiid", apiid) :
                new ObjectParameter("apiid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<use_GetOperatorDaybook_Result>("use_GetOperatorDaybook", sdateParameter, edateParameter, useridParameter, apiidParameter);
        }
    
        public virtual int usp_AutoCorrect_SameOppening_TxnLedger()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_AutoCorrect_SameOppening_TxnLedger");
        }
    
        public virtual int usp_Check_TxnLedger_OppeningClosing_Sequential()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Check_TxnLedger_OppeningClosing_Sequential");
        }
    
        public virtual ObjectResult<usp_GetApiDayBook_Result> usp_GetApiDayBook(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> userId)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetApiDayBook_Result>("usp_GetApiDayBook", sDateParameter, eDateParameter, userIdParameter);
        }
    
        public virtual int usp_GetApiValidation(Nullable<int> apiId, ObjectParameter amountUnitId, ObjectParameter amountLength, ObjectParameter randomKey, ObjectParameter dateTimeFormat, ObjectParameter refPadding, ObjectParameter refLength, ObjectParameter isNumeric)
        {
            var apiIdParameter = apiId.HasValue ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetApiValidation", apiIdParameter, amountUnitId, amountLength, randomKey, dateTimeFormat, refPadding, refLength, isNumeric);
        }
    
        public virtual ObjectResult<usp_GetDayBookV2VendorWise_Result> usp_GetDayBookV2VendorWise(Nullable<System.DateTime> sdate, Nullable<System.DateTime> edate, Nullable<int> userid, Nullable<int> apiid, Nullable<int> opid, Nullable<int> circleid)
        {
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var edateParameter = edate.HasValue ?
                new ObjectParameter("edate", edate) :
                new ObjectParameter("edate", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var apiidParameter = apiid.HasValue ?
                new ObjectParameter("apiid", apiid) :
                new ObjectParameter("apiid", typeof(int));
    
            var opidParameter = opid.HasValue ?
                new ObjectParameter("opid", opid) :
                new ObjectParameter("opid", typeof(int));
    
            var circleidParameter = circleid.HasValue ?
                new ObjectParameter("circleid", circleid) :
                new ObjectParameter("circleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDayBookV2VendorWise_Result>("usp_GetDayBookV2VendorWise", sdateParameter, edateParameter, useridParameter, apiidParameter, opidParameter, circleidParameter);
        }
    
        public virtual int usp_GetDealerDayBook(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> dealerId, string filterType)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var dealerIdParameter = dealerId.HasValue ?
                new ObjectParameter("DealerId", dealerId) :
                new ObjectParameter("DealerId", typeof(int));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetDealerDayBook", sDateParameter, eDateParameter, dealerIdParameter, filterTypeParameter);
        }
    
        public virtual int usp_GetDMTByRef(string ourRefTxnId, string apiTxnId, string remark, ObjectParameter recId, ObjectParameter userId, ObjectParameter apiId, ObjectParameter statusId, ObjectParameter log, string lapuNo, ObjectParameter lapuId, ObjectParameter opId)
        {
            var ourRefTxnIdParameter = ourRefTxnId != null ?
                new ObjectParameter("OurRefTxnId", ourRefTxnId) :
                new ObjectParameter("OurRefTxnId", typeof(string));
    
            var apiTxnIdParameter = apiTxnId != null ?
                new ObjectParameter("ApiTxnId", apiTxnId) :
                new ObjectParameter("ApiTxnId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetDMTByRef", ourRefTxnIdParameter, apiTxnIdParameter, remarkParameter, recId, userId, apiId, statusId, log, lapuNoParameter, lapuId, opId);
        }
    
        public virtual int usp_GetDMTDetail(Nullable<long> recId, string filterType, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log)
        {
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetDMTDetail", recIdParameter, filterTypeParameter, errorCode, errorDesc, log);
        }
    
        public virtual int usp_GetErrorInfo(string remark)
        {
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetErrorInfo", remarkParameter);
        }
    
        public virtual int usp_GetRechargeByRef(string ourRefTxnId, string apiTxnId, string remark, ObjectParameter recId, ObjectParameter userId, ObjectParameter apiId, ObjectParameter statusId, ObjectParameter log, string lapuNo, ObjectParameter lapuId, ObjectParameter opId)
        {
            var ourRefTxnIdParameter = ourRefTxnId != null ?
                new ObjectParameter("OurRefTxnId", ourRefTxnId) :
                new ObjectParameter("OurRefTxnId", typeof(string));
    
            var apiTxnIdParameter = apiTxnId != null ?
                new ObjectParameter("ApiTxnId", apiTxnId) :
                new ObjectParameter("ApiTxnId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetRechargeByRef", ourRefTxnIdParameter, apiTxnIdParameter, remarkParameter, recId, userId, apiId, statusId, log, lapuNoParameter, lapuId, opId);
        }
    
        public virtual int usp_GetRechargeDetail(Nullable<long> recId, string filterType, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log)
        {
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetRechargeDetail", recIdParameter, filterTypeParameter, errorCode, errorDesc, log);
        }
    
        public virtual ObjectResult<usp_GetRecListByNumber1_Result> usp_GetRecListByNumber1(string number, Nullable<int> userId, string remark)
        {
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecListByNumber1_Result>("usp_GetRecListByNumber1", numberParameter, userIdParameter, remarkParameter);
        }
    
        public virtual ObjectResult<usp_GetTagValueByUrl_Result> usp_GetTagValueByUrl(Nullable<int> apiId, Nullable<int> urlId, string remark)
        {
            var apiIdParameter = apiId.HasValue ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(int));
    
            var urlIdParameter = urlId.HasValue ?
                new ObjectParameter("UrlId", urlId) :
                new ObjectParameter("UrlId", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTagValueByUrl_Result>("usp_GetTagValueByUrl", apiIdParameter, urlIdParameter, remarkParameter);
        }
    
        public virtual int usp_GetUserBalance(string apiToken, ObjectParameter balance, ObjectParameter error, ObjectParameter errorDesc, ObjectParameter log)
        {
            var apiTokenParameter = apiToken != null ?
                new ObjectParameter("ApiToken", apiToken) :
                new ObjectParameter("ApiToken", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetUserBalance", apiTokenParameter, balance, error, errorDesc, log);
        }
    
        public virtual ObjectResult<usp_GetUserDayBook_Result> usp_GetUserDayBook(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> userId)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserDayBook_Result>("usp_GetUserDayBook", sDateParameter, eDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetUserDayBookDateWise_Result> usp_GetUserDayBookDateWise(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, Nullable<int> userId)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserDayBookDateWise_Result>("usp_GetUserDayBookDateWise", sDateParameter, eDateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<usp_GetUserDayBookV2_Result> usp_GetUserDayBookV2(Nullable<System.DateTime> sdate, Nullable<System.DateTime> edate, Nullable<int> userid, Nullable<int> apiid, Nullable<int> opid, Nullable<int> circleid)
        {
            var sdateParameter = sdate.HasValue ?
                new ObjectParameter("sdate", sdate) :
                new ObjectParameter("sdate", typeof(System.DateTime));
    
            var edateParameter = edate.HasValue ?
                new ObjectParameter("edate", edate) :
                new ObjectParameter("edate", typeof(System.DateTime));
    
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            var apiidParameter = apiid.HasValue ?
                new ObjectParameter("apiid", apiid) :
                new ObjectParameter("apiid", typeof(int));
    
            var opidParameter = opid.HasValue ?
                new ObjectParameter("opid", opid) :
                new ObjectParameter("opid", typeof(int));
    
            var circleidParameter = circleid.HasValue ?
                new ObjectParameter("circleid", circleid) :
                new ObjectParameter("circleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetUserDayBookV2_Result>("usp_GetUserDayBookV2", sdateParameter, edateParameter, useridParameter, apiidParameter, opidParameter, circleidParameter);
        }
    
        public virtual int usp_InsertApiWalletTxn(Nullable<int> apiId, Nullable<long> recId, Nullable<decimal> debitAmt, Nullable<long> refTxnId, string remark, Nullable<decimal> apiOpBal, Nullable<decimal> apiClBal, ObjectParameter log, Nullable<long> lapuId, string lapuNo, Nullable<int> opId)
        {
            var apiIdParameter = apiId.HasValue ?
                new ObjectParameter("ApiId", apiId) :
                new ObjectParameter("ApiId", typeof(int));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var debitAmtParameter = debitAmt.HasValue ?
                new ObjectParameter("DebitAmt", debitAmt) :
                new ObjectParameter("DebitAmt", typeof(decimal));
    
            var refTxnIdParameter = refTxnId.HasValue ?
                new ObjectParameter("RefTxnId", refTxnId) :
                new ObjectParameter("RefTxnId", typeof(long));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var apiOpBalParameter = apiOpBal.HasValue ?
                new ObjectParameter("ApiOpBal", apiOpBal) :
                new ObjectParameter("ApiOpBal", typeof(decimal));
    
            var apiClBalParameter = apiClBal.HasValue ?
                new ObjectParameter("ApiClBal", apiClBal) :
                new ObjectParameter("ApiClBal", typeof(decimal));
    
            var lapuIdParameter = lapuId.HasValue ?
                new ObjectParameter("LapuId", lapuId) :
                new ObjectParameter("LapuId", typeof(long));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_InsertApiWalletTxn", apiIdParameter, recIdParameter, debitAmtParameter, refTxnIdParameter, remarkParameter, apiOpBalParameter, apiClBalParameter, log, lapuIdParameter, lapuNoParameter, opIdParameter);
        }
    
        public virtual ObjectResult<usp_ListOFSqlJobs_Result> usp_ListOFSqlJobs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ListOFSqlJobs_Result>("usp_ListOFSqlJobs");
        }
    
        public virtual int usp_Run_SQL_Agent_Job_Manually(string remark)
        {
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Run_SQL_Agent_Job_Manually", remarkParameter);
        }
    
        public virtual int usp_RunSqlJobManually(string jobName)
        {
            var jobNameParameter = jobName != null ?
                new ObjectParameter("jobName", jobName) :
                new ObjectParameter("jobName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_RunSqlJobManually", jobNameParameter);
        }
    
        public virtual int usp_ServiceCrWise(Nullable<int> opId, Nullable<int> circle, string remark)
        {
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var circleParameter = circle.HasValue ?
                new ObjectParameter("Circle", circle) :
                new ObjectParameter("Circle", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ServiceCrWise", opIdParameter, circleParameter, remarkParameter);
        }
    
        public virtual int usp_SetDMTUpdatedBy(string filterType, Nullable<long> recId, string userId, string remark)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetDMTUpdatedBy", filterTypeParameter, recIdParameter, userIdParameter, remarkParameter);
        }
    
        public virtual int usp_SetRechargeUpdatedBy(string filterType, Nullable<long> recId, string userId, string remark)
        {
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SetRechargeUpdatedBy", filterTypeParameter, recIdParameter, userIdParameter, remarkParameter);
        }
    
        public virtual int usp_Update_TxnLedger_OppeningClosing_Sequential_AllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_TxnLedger_OppeningClosing_Sequential_AllUser");
        }
    
        public virtual int usp_Update_TxnLedger_OppeningClosing_Sequential_Userwise()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_Update_TxnLedger_OppeningClosing_Sequential_Userwise");
        }
    
        public virtual int usp_UpdateDMTDetailToReqRes(Nullable<int> id, Nullable<int> urlId, Nullable<long> recId, string refId, string remark, string requestTxt, string responseText, Nullable<int> userId, string customerNo, string userTxnId, string opId, string filterType, ObjectParameter currentId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var urlIdParameter = urlId.HasValue ?
                new ObjectParameter("UrlId", urlId) :
                new ObjectParameter("UrlId", typeof(int));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var refIdParameter = refId != null ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var requestTxtParameter = requestTxt != null ?
                new ObjectParameter("RequestTxt", requestTxt) :
                new ObjectParameter("RequestTxt", typeof(string));
    
            var responseTextParameter = responseText != null ?
                new ObjectParameter("ResponseText", responseText) :
                new ObjectParameter("ResponseText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var opIdParameter = opId != null ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDMTDetailToReqRes", idParameter, urlIdParameter, recIdParameter, refIdParameter, remarkParameter, requestTxtParameter, responseTextParameter, userIdParameter, customerNoParameter, userTxnIdParameter, opIdParameter, filterTypeParameter, currentId);
        }
    
        public virtual int usp_UpdateDMTStatus(string updateType, Nullable<long> recId, Nullable<int> statusId, string apiTxnId, string beneName, string optTxnId, string statusMsg, string remark, Nullable<int> userId, ObjectParameter isRefund, ObjectParameter isDownline, ObjectParameter log, Nullable<long> lapuId, string lapuNo, string fessionNo, Nullable<int> opId)
        {
            var updateTypeParameter = updateType != null ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var apiTxnIdParameter = apiTxnId != null ?
                new ObjectParameter("ApiTxnId", apiTxnId) :
                new ObjectParameter("ApiTxnId", typeof(string));
    
            var beneNameParameter = beneName != null ?
                new ObjectParameter("BeneName", beneName) :
                new ObjectParameter("BeneName", typeof(string));
    
            var optTxnIdParameter = optTxnId != null ?
                new ObjectParameter("OptTxnId", optTxnId) :
                new ObjectParameter("OptTxnId", typeof(string));
    
            var statusMsgParameter = statusMsg != null ?
                new ObjectParameter("StatusMsg", statusMsg) :
                new ObjectParameter("StatusMsg", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lapuIdParameter = lapuId.HasValue ?
                new ObjectParameter("LapuId", lapuId) :
                new ObjectParameter("LapuId", typeof(long));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            var fessionNoParameter = fessionNo != null ?
                new ObjectParameter("FessionNo", fessionNo) :
                new ObjectParameter("FessionNo", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateDMTStatus", updateTypeParameter, recIdParameter, statusIdParameter, apiTxnIdParameter, beneNameParameter, optTxnIdParameter, statusMsgParameter, remarkParameter, userIdParameter, isRefund, isDownline, log, lapuIdParameter, lapuNoParameter, fessionNoParameter, opIdParameter);
        }
    
        public virtual int usp_UpdateRecDetailToReqRes(Nullable<int> id, Nullable<int> urlId, Nullable<long> recId, string refId, string remark, string requestTxt, string responseText, Nullable<int> userId, string customerNo, string userTxnId, string opId, string filterType, ObjectParameter currentId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var urlIdParameter = urlId.HasValue ?
                new ObjectParameter("UrlId", urlId) :
                new ObjectParameter("UrlId", typeof(int));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var refIdParameter = refId != null ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var requestTxtParameter = requestTxt != null ?
                new ObjectParameter("RequestTxt", requestTxt) :
                new ObjectParameter("RequestTxt", typeof(string));
    
            var responseTextParameter = responseText != null ?
                new ObjectParameter("ResponseText", responseText) :
                new ObjectParameter("ResponseText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var opIdParameter = opId != null ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRecDetailToReqRes", idParameter, urlIdParameter, recIdParameter, refIdParameter, remarkParameter, requestTxtParameter, responseTextParameter, userIdParameter, customerNoParameter, userTxnIdParameter, opIdParameter, filterTypeParameter, currentId);
        }
    
        public virtual int usp_UpdateRechargeStatus(string updateType, Nullable<long> recId, string statusId, string apiTxnId, string optTxnId, string statusMsg, string customerName, string remark, Nullable<int> userId, ObjectParameter isRefund, ObjectParameter isDownline, ObjectParameter log, Nullable<long> lapuId, string lapuNo, Nullable<int> opId, Nullable<decimal> apiBal, Nullable<decimal> rOfferAmt, string comment, Nullable<decimal> apiOpBal)
        {
            var updateTypeParameter = updateType != null ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var statusIdParameter = statusId != null ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(string));
    
            var apiTxnIdParameter = apiTxnId != null ?
                new ObjectParameter("ApiTxnId", apiTxnId) :
                new ObjectParameter("ApiTxnId", typeof(string));
    
            var optTxnIdParameter = optTxnId != null ?
                new ObjectParameter("OptTxnId", optTxnId) :
                new ObjectParameter("OptTxnId", typeof(string));
    
            var statusMsgParameter = statusMsg != null ?
                new ObjectParameter("StatusMsg", statusMsg) :
                new ObjectParameter("StatusMsg", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lapuIdParameter = lapuId.HasValue ?
                new ObjectParameter("LapuId", lapuId) :
                new ObjectParameter("LapuId", typeof(long));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var apiBalParameter = apiBal.HasValue ?
                new ObjectParameter("ApiBal", apiBal) :
                new ObjectParameter("ApiBal", typeof(decimal));
    
            var rOfferAmtParameter = rOfferAmt.HasValue ?
                new ObjectParameter("ROfferAmt", rOfferAmt) :
                new ObjectParameter("ROfferAmt", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var apiOpBalParameter = apiOpBal.HasValue ?
                new ObjectParameter("ApiOpBal", apiOpBal) :
                new ObjectParameter("ApiOpBal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRechargeStatus", updateTypeParameter, recIdParameter, statusIdParameter, apiTxnIdParameter, optTxnIdParameter, statusMsgParameter, customerNameParameter, remarkParameter, userIdParameter, isRefund, isDownline, log, lapuIdParameter, lapuNoParameter, opIdParameter, apiBalParameter, rOfferAmtParameter, commentParameter, apiOpBalParameter);
        }
    
        public virtual int usp_UpdateRechargeStatusPayin(string updateType, Nullable<long> recId, string statusId, string apiTxnId, string optTxnId, string statusMsg, string customerName, string remark, Nullable<int> userId, ObjectParameter isRefund, ObjectParameter isDownline, ObjectParameter log, Nullable<long> lapuId, string lapuNo, Nullable<int> opId, Nullable<decimal> apiBal, Nullable<decimal> rOfferAmt, string comment, Nullable<decimal> apiOpBal)
        {
            var updateTypeParameter = updateType != null ?
                new ObjectParameter("UpdateType", updateType) :
                new ObjectParameter("UpdateType", typeof(string));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var statusIdParameter = statusId != null ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(string));
    
            var apiTxnIdParameter = apiTxnId != null ?
                new ObjectParameter("ApiTxnId", apiTxnId) :
                new ObjectParameter("ApiTxnId", typeof(string));
    
            var optTxnIdParameter = optTxnId != null ?
                new ObjectParameter("OptTxnId", optTxnId) :
                new ObjectParameter("OptTxnId", typeof(string));
    
            var statusMsgParameter = statusMsg != null ?
                new ObjectParameter("StatusMsg", statusMsg) :
                new ObjectParameter("StatusMsg", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var lapuIdParameter = lapuId.HasValue ?
                new ObjectParameter("LapuId", lapuId) :
                new ObjectParameter("LapuId", typeof(long));
    
            var lapuNoParameter = lapuNo != null ?
                new ObjectParameter("LapuNo", lapuNo) :
                new ObjectParameter("LapuNo", typeof(string));
    
            var opIdParameter = opId.HasValue ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(int));
    
            var apiBalParameter = apiBal.HasValue ?
                new ObjectParameter("ApiBal", apiBal) :
                new ObjectParameter("ApiBal", typeof(decimal));
    
            var rOfferAmtParameter = rOfferAmt.HasValue ?
                new ObjectParameter("ROfferAmt", rOfferAmt) :
                new ObjectParameter("ROfferAmt", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var apiOpBalParameter = apiOpBal.HasValue ?
                new ObjectParameter("ApiOpBal", apiOpBal) :
                new ObjectParameter("ApiOpBal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRechargeStatusPayin", updateTypeParameter, recIdParameter, statusIdParameter, apiTxnIdParameter, optTxnIdParameter, statusMsgParameter, customerNameParameter, remarkParameter, userIdParameter, isRefund, isDownline, log, lapuIdParameter, lapuNoParameter, opIdParameter, apiBalParameter, rOfferAmtParameter, commentParameter, apiOpBalParameter);
        }
    
        public virtual int usp_UpdateRetailerStatus(Nullable<long> recId, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log)
        {
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateRetailerStatus", recIdParameter, errorCode, errorDesc, log);
        }
    
        public virtual int usp_UpdateWalletTransferToReqRes(Nullable<int> id, Nullable<int> urlId, Nullable<long> recId, string refId, string remark, string requestTxt, string responseText, Nullable<int> userId, string customerNo, string userTxnId, string opId, string filterType, ObjectParameter currentId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var urlIdParameter = urlId.HasValue ?
                new ObjectParameter("UrlId", urlId) :
                new ObjectParameter("UrlId", typeof(int));
    
            var recIdParameter = recId.HasValue ?
                new ObjectParameter("RecId", recId) :
                new ObjectParameter("RecId", typeof(long));
    
            var refIdParameter = refId != null ?
                new ObjectParameter("RefId", refId) :
                new ObjectParameter("RefId", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var requestTxtParameter = requestTxt != null ?
                new ObjectParameter("RequestTxt", requestTxt) :
                new ObjectParameter("RequestTxt", typeof(string));
    
            var responseTextParameter = responseText != null ?
                new ObjectParameter("ResponseText", responseText) :
                new ObjectParameter("ResponseText", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var customerNoParameter = customerNo != null ?
                new ObjectParameter("CustomerNo", customerNo) :
                new ObjectParameter("CustomerNo", typeof(string));
    
            var userTxnIdParameter = userTxnId != null ?
                new ObjectParameter("UserTxnId", userTxnId) :
                new ObjectParameter("UserTxnId", typeof(string));
    
            var opIdParameter = opId != null ?
                new ObjectParameter("OpId", opId) :
                new ObjectParameter("OpId", typeof(string));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_UpdateWalletTransferToReqRes", idParameter, urlIdParameter, recIdParameter, refIdParameter, remarkParameter, requestTxtParameter, responseTextParameter, userIdParameter, customerNoParameter, userTxnIdParameter, opIdParameter, filterTypeParameter, currentId);
        }
    
        public virtual int usp_ValidateUser(string token, string iPAddress, string number, ObjectParameter userId, ObjectParameter count, ObjectParameter errorCode, ObjectParameter errorDesc, ObjectParameter log)
        {
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("Number", number) :
                new ObjectParameter("Number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_ValidateUser", tokenParameter, iPAddressParameter, numberParameter, userId, count, errorCode, errorDesc, log);
        }
    
        public virtual ObjectResult<usp_WalletExchageReport_Result> usp_WalletExchageReport(Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate)
        {
            var sDateParameter = sDate.HasValue ?
                new ObjectParameter("sDate", sDate) :
                new ObjectParameter("sDate", typeof(System.DateTime));
    
            var eDateParameter = eDate.HasValue ?
                new ObjectParameter("eDate", eDate) :
                new ObjectParameter("eDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_WalletExchageReport_Result>("usp_WalletExchageReport", sDateParameter, eDateParameter);
        }
    
        public virtual ObjectResult<VenderBalanceList_Result> VenderBalanceList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VenderBalanceList_Result>("VenderBalanceList");
        }
    }
}
